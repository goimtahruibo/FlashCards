from typing import Set#IDK what this does, i don't want to break the programm so it's here
import random
import pathlib
import os
class Deck_of_questions:
    Decknames = []
    def __init__(self,name,Coursename):
        Deck_of_questions.Decknames.append(name)
        self.name = name
        self.Coursename = Coursename
        self.Questionsfile = os.path.join(Coursename,name+"QU.txt" )
        self.Answerfile =os.path.join(Coursename,name+"AN.txt" )
    def CreateFiles(self):#creates question and answer files if the Decks do not exist
        self.fileQ = open(self.Questionsfile,'w')
        self.fileQ.close()
        self.fileA = open(self.Answerfile,"w")#creates an empty text file
        self.fileA.close()
        self.ReadFiles()#runs Readfiles to create the question and answer list
    def CreateAnswerandQuestionLists(self):#creates list of answer or Questions from files
        newlist = []
        for line in self.oldlist:
            newlist.append(line.strip())
        return(newlist)
    def ReadFiles(self):#Reads the files
        self.fileQ = open(self.Questionsfile,'r')
        self.oldlist = self.fileQ.readlines()#Saves the text Question file to a list(oldlist: 
        #it is called oldlist as it will be used temporarily to add to the newlist in create questions list)
        self.Qlist = self.CreateAnswerandQuestionLists()#creates a question list from the oldlist but without the \n and
        # adds it to the variable self.Qlist
        self.fileQ.close()
        self.fileA = open(self.Answerfile,"r")
        self.oldlist = self.fileA.readlines()#repeats the same for Answers
        self.Alist = self.CreateAnswerandQuestionLists()#repeats the same for Answers
        self.fileA.close()
    def AddQandA(self,Question,Answer):
        self.Qlist.append(Question)
        self.Alist.append(Answer)
    def SaveQandA(self):#saves changes to answer and question list
        self.fileQ = open(self.Questionsfile,'w')
        for question in self.Qlist:
            self.fileQ.write(question+"\n")
        self.fileQ.close()
        self.fileA = open(self.Answerfile,"w")
        for answer in self.Alist:
            self.fileA.write(answer+"\n")
        self.fileA.close()   
    def Import_QandAtextfile(self,QuestionFile,AnswerFile):#Test if this works when ellis comes and sends the file
        self.ImportedQ = open(QuestionFile+".txt")
        self.Importedlist = self.ImportedQ.readlines()
        for each in self.Importedlist:
            self.Qlist.append(each.strip())
        self.ImportedQ.close()
        self.ImportedA = open(AnswerFile+".txt")
        self.Importedlist = self.ImportedA.readlines()
        for each in self.Importedlist:
            self.Alist.append(each.strip())
        self.ImportedA.close()
        self.SaveQandA()
    def Import_csvQandA(self,Filename):
        File = open(Filename+".csv","r")
        Lines = File.readlines()
        for each in Lines:
            each = each.strip()
            if "QUESTION" in each.upper() or "ANSWER" in each.upper():
                pass
            else:
                comma = each.find(",")#Finds the index of the comma
                Question = each[:comma]
                Answer = each[comma+1:]
                self.Qlist.append(Question)
                self.Alist.append(Answer)
        self.SaveQandA()
    def DeleteQandA(self,Index):
        self.Qlist.pop(Index)
        self.Alist.pop(Index)
        self.SaveQandA()
    def AddTestQandAlist(self,Answers,Questions):
        for each in self.Qlist:
            Questions.append(each)
        for each in self.Alist:
            Answers.append(each)
        return (Answers,Questions)
        
class Course:
    Coursenames = []
    def __init__(self,name):
        Course.Coursenames.append(name)
        self.name = name+"Course"
        self.Decks = []#the saved Deck objects
        try:
            os.makedirs(self.name)
        except:
            pass
    def CreateNewDeck(self,Deckname):#creates a new Deck object and saves it to the textfile
        self.Decks.append(Deck_of_questions(Deckname,self.name))#adds an object to Decks list of type Deckofquestions
        self.Decks[-1].CreateFiles()
    def InstantiateSavedSets(self):
        for path in pathlib.Path(self.name).iterdir():
            if "QU" in path.name:
                self.Decks.append(Deck_of_questions(path.name[0:-6],self.name))
                self.Decks[-1].ReadFiles()
    def GetDeck(self,Deckname):#Gets the Decks list with the name requested from the user
        cont = False
        while cont == False:
            index = 0
            for each in self.Decks:#Checks if the name from Deckname is the same as a name of a Deck within the Course the user already chose
                if each.name.upper() == Deckname.upper():
                    DeckAccessed = self.Decks[index]
                    return(DeckAccessed)
                index += 1
            if index == len(self.Decks):# if the user types in the wrong name this will return false to continue a while loop
                cont = False
                Deckname = input("You spelt the name wrong, please give a new name")


def GetCourses():#opens the Course file and gets the saved Decks
    CourseObjects = []
    try:#this try and except checks if there is a course file available, if not it makes a new one
        courses = open("CourseList.txt","r")
    except:
        courses = open("CourseList.txt","w")
        courses.close()
        courses = open("CourseList.txt","r")
    Lines = courses.readlines()
    for course in Lines:
        CourseObjects.append(Course(course.strip()))
        CourseObjects[-1].InstantiateSavedSets( )
    courses.close()
    return(CourseObjects)
def CreateNewCourse(Coursename,CourseObjects):
    CourseObjects.append(Course(Coursename))
    SaveCourses(CourseObjects)
    return(CourseObjects)
def SaveCourses(CourseObjects):
    CourseFile = open("CourseList.txt","w")
    for each in CourseObjects:
        CourseFile.write(each.name[:-6]+"\n")
    CourseFile.close()
CourseObjects = GetCourses()
for each in CourseObjects:
    print(each.name)
for each in CourseObjects[-1].Decks:
    print(each.name)
#Test = Course("Test")
#Test.InstantiateSavedSets()
#for each in Test.Decks:
#   print(each.name)
def Testing():
    Test = Course("Test")
    Test.CreateNewDeck("TEstDEck")
    Test.Decks[0].Qlist.append("Hi")
    Test.Decks[0].Alist.append("bye")
    print(Test.Decks[0].Qlist,Test.Decks[0].Alist)
    Test.Decks[0].SaveQandA()

def t():
    for path in pathlib.Path("Test").iterdir():
        if path.is_file():
            print(path.name[0:-6])
            current_file = open(path, "r")
            print(current_file.read())
            current_file.close()